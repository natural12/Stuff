#include <stdio.h>
    #include <stdlib.h>
    #include <cuda.h>
    #include <curand_kernel.h>
    #include <math_constants.h>

   extern "C"
    {
    __global__ void truncnorm_kernel(
      float *vals, int n, float *mu, float *sigma, float *a, float *b, int rng_a, int rng_b)
    { // Usual block/thread indexing...
    int myblock = blockIdx.x + blockIdx.y * gridDim.x;
    int blocksize = blockDim.x * blockDim.y * blockDim.z;
    int subthread = threadIdx.z*(blockDim.x * blockDim.y) + threadIdx.y*blockDim.x + threadIdx.x;
    int idx = myblock * blocksize + subthread;
    float mm; float lambda; float y; float fz; float z; int accepted;
    // Setup the RNG:
    curandState rng;
    curand_init(rng_a+idx*rng_b,idx,0,&rng);
    
    //Sample:
      if (idx<n){
        if ((a[0]-mu[0])/sigma[0]>=0 ){mm=(a[0]-mu[0])/sigma[0];}   //mu- lower truncated
        if ((b[0]-mu[0])/sigma[0]<=0 ){mm=-(b[0]-mu[0])/sigma[0];} 
        lambda=(mm+sqrtf(pow(mm,2)+4))/2;
        accepted=0;

        while (accepted==0){
        y = -log(curand_uniform(&rng))/lambda;   //expo(lambda)
        z=mm+y;
        
        if (mm<lambda){fz=expf(-pow(lambda-z,2)/2);}
        if (mm>=lambda){fz=expf(pow((mm-lambda),2)/2-pow((lambda-z),2)/2);}
          if(fz>curand_uniform(&rng)){
             if ((a[0]-mu[0])/sigma[0]>=0){vals[idx]=z*sigma[0]+mu[0];}
             if ((b[0]-mu[0])/sigma[0]<=0){vals[idx]=(-z)*sigma[0]+mu[0];}
             accepted=1;
           }
        }     
      }
      return;
     }
  } // END extern "C"
