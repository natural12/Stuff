    #include <stdio.h>
    #include <stdlib.h>
    #include <cuda.h>
    #include <curand_kernel.h>
    #include <math_constants.h>

    extern "C"
    {

    __global__ void truncnorm_kernel(
      float *vals,
      int n,
   
      float *mu,
      float *a,
      float *b,
      float *sigma,

      int rng_a,
      int rng_b
      )
     

    {
            // Usual block/thread indexing...
    int myblock = blockIdx.x + blockIdx.y * gridDim.x;
    int blocksize = blockDim.x * blockDim.y * blockDim.z;
    int subthread = threadIdx.z*(blockDim.x * blockDim.y) + threadIdx.y*blockDim.x + threadIdx.x;
    int idx = myblock * blocksize + subthread;
    int accepted;
    float y;
    // Setup the RNG:
    curandState rng;
    curand_init(rng_a+idx*rng_b,idx,0,&rng);
    
    //Sample:
      if (idx<n){
	accepted=0;

        while (accepted==0){
        y = mu[0] + sigma[0] * curand_normal(&rng);
 
           if (y> a[0] && y<b[0]){
           vals[idx]=y;
           accepted=1;
           }
        }
       
           
      }
      return;
      
    
    
     }

    } // END extern "C"
